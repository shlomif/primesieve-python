# Our .travis.yml is a slightly modified version of:
# https://github.com/joerick/cibuildwheel#example-setup

language: python
jobs:
  include:
    # perform a linux build
    - services: docker
      env:
      - BUILD_SOURCE_DISTRIBUTION="true"
    - services: docker
    # and a mac build
    - os: osx
      # PyPy 7.3.2 needs macOS >= 10.14
      osx_image: xcode10.2
      language: shell
    # and a windows build
    - os: windows
      language: shell
      before_install:
        - choco install python --version 3.8.0
        - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
        # make sure it's on PATH as 'python3'
        - ln -s /c/Python38/python.exe /c/Python38/python3.exe

env:
  global:
  # Skip building Python 2.7 and PyPy (jit)
  - CIBW_SKIP="cp27-* pp*"
  - TWINE_USERNAME=__token__
  # Note: TWINE_PASSWORD is set to a PyPI API token in Travis settings

install:
  - python3 -m pip install --upgrade setuptools cython numpy pytest cibuildwheel==1.6.4
  # Because of a bug in Travis we have to pin keyring here,
  # see: https://github.com/kimwalisch/primesieve-python/issues/44.
  # Try removing this workaround in 2022 (remove "keyring==21.4.0").
  - python3 -m pip install twine keyring==21.4.0

script:
  - |
    if [ "$BUILD_SOURCE_DISTRIBUTION" = "true" ]
    then
        python3 setup.py install
        pytest
        pushd ..
        python3 -c "import primesieve;print(primesieve.n_primes(10))"
        popd
        python3 setup.py sdist
        export UPLOAD_FILES=dist/*.tar.gz
    else
        # For the CIBW environment variables we need to use python instead of python3.
        # This way we use the CIBW python version.
        export CIBW_BEFORE_BUILD="python -m pip install --upgrade cython numpy"
        export CIBW_TEST_REQUIRES="pytest numpy"
        export CIBW_TEST_COMMAND='pytest {project} && python -c "import primesieve;print(primesieve.n_primes(10))"'
        python3 -m cibuildwheel --output-dir wheelhouse
        export UPLOAD_FILES=wheelhouse/*.whl
    fi

# Unfortunately failures in after_success currently do not cause the
# build to fail, see https://github.com/travis-ci/travis-ci/issues/758.
# I think we could switch to "deploy:" to get the desired behavior.
after_success:
  # All commits are uploaded to https://test.pypi.org in order to
  # ensure that releases will be uploaded to PyPi without any issues.
  - python3 -m twine upload -p $TEST_TOKEN --repository-url https://test.pypi.org/legacy --verbose $UPLOAD_FILES;
  
  # If the release was tagged, upload to PyPI.
  - if [[ $TRAVIS_TAG ]]; then python3 -m twine upload -p $PYPI_TOKEN --verbose $UPLOAD_FILES; fi
